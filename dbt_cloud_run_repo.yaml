steps:
  - id: "Install Deps"
    name: "python:3.11-slim"
    entrypoint: sh
    args:
      - "-c"
      - |
        apt-get update -y
        apt-get install -y git gettext-base
        pip install uv
        uv venv
        uv pip install -r pyproject.toml
    volumes:
      - name: virtual_env
        path: /.venv

  - id: "Generate Token & Build Profile"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        set -e

        apt-get update && apt-get install -y jq curl gettext-base

        # Get active service account without variable assignment
        echo "Getting active service account..."
        gcloud auth list --filter=status:ACTIVE --format="value(account)" > /workspace/service_account.txt
        echo "Using service account: $(cat /workspace/service_account.txt)"

        echo "Project ID: $_GOOGLE_CLOUD_PROJECT"

        # Generate token without variable assignment
        echo "Generating token with Drive scope..."
        curl -s -X POST \
          -H "Authorization: Bearer $(gcloud auth print-access-token)" \
          -H "Content-Type: application/json" \
          -d '{
            "scope": [
              "https://www.googleapis.com/auth/bigquery",
              "https://www.googleapis.com/auth/drive.readonly"
            ]
          }' \
          "https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/$(cat /workspace/service_account.txt):generateAccessToken" \
          | jq -r '.accessToken' > /workspace/drive_token.txt
        
        # Print token for debugging (first few characters only for security)
        echo "Token generated. First 10 characters: $(head -c 300 /workspace/drive_token.txt)..."
        
        # Test the token by making a Drive API call
        echo "Testing token with Drive API..."
        curl -s -H "Authorization: Bearer $(cat /workspace/drive_token.txt)" "https://www.googleapis.com/drive/v3/files?pageSize=1" | jq .
        
        # Create profiles.yml
        mkdir -p /workspace/.dbt/
        
        # Create profiles with environment variable substitution - include both default and dbt_sample_project profiles
        echo "Creating profiles.yml..."
        echo "default:
        outputs:
          dev:
            type: bigquery
            method: oauth
            token: \"$(cat /workspace/drive_token.txt)\"
            project: \"$_GOOGLE_CLOUD_PROJECT\"
            dataset: dbt_dataset
            threads: 4
            timeout_seconds: 300
        target: dev

        dbt_sample_project:
        outputs:
          dev:
            type: bigquery
            method: oauth
            token: \"$(cat /workspace/drive_token.txt)\"
            project: \"$_GOOGLE_CLOUD_PROJECT\"
            dataset: dbt_dataset
            threads: 4
            timeout_seconds: 300
        target: dev" > /workspace/.dbt/profiles.yml
              
        echo "Profile created successfully."
        echo "For troubleshooting, here's the profiles.yml with token redacted:"
        cat /workspace/.dbt/profiles.yml | sed 's/token: "[^"]*"/token: "REDACTED"/g'
        

  - id: "Check dbt Project Config"
    name: "python:3.11-slim"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Checking dbt project configuration..."
        # Look for dbt_project.yml to find the project name
        if [ -f "dbt_project.yml" ]; then
          echo "dbt_project.yml found. Contents:"
          cat dbt_project.yml | grep -A1 "name:"
        else
          echo "dbt_project.yml not found in the root directory."
          find /workspace -name "dbt_project.yml" -type f | xargs cat | grep -A1 "name:"
        fi

  - id: "DBT Check"
    name: "python:3.11-slim"
    entrypoint: sh
    env:
      - 'DBT_PROFILES_DIR=/workspace/.dbt/'
    args:
      - "-c"
      - |
        . .venv/bin/activate
        apt-get update && apt-get install -y git
        dbt --version
        dbt deps --profile dbt_sample_project
        dbt compile --profile dbt_sample_project
        dbt debug --profile dbt_sample_project
        dbt ls --profile dbt_sample_project
    volumes:
      - name: virtual_env
        path: /.venv

  - id: "DBT Run"
    name: "python:3.11-slim"
    entrypoint: sh
    env:
      - 'DBT_PROFILES_DIR=/workspace/.dbt/'
    args:
      - "-c"
      - |
        . .venv/bin/activate
        dbt deps --profile dbt_sample_project
        dbt run --profile dbt_sample_project
    volumes:
      - name: virtual_env
        path: /.venv

options:
  logStreamingOption: STREAM_ON
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _GOOGLE_CLOUD_PROJECT: "earnest-beacon-455013-n6"