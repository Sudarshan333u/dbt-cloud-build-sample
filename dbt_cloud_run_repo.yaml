steps:
  - id: "Install Deps"
    name: "python:3.11-slim"
    entrypoint: sh
    args:
      - "-c"
      - |
        apt-get update -y
        apt-get install -y git
        pip install uv
        uv venv
        uv pip install -r pyproject.toml
    volumes:
      - name: virtual_env
        path: /.venv

  - id: "Setup Auth With Drive Scope"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
    - "-c"
    - |
      echo "Setting up authentication with Drive scope..."
      # Get the current service account email
      CURRENT_SA=$(gcloud auth list --filter=status:ACTIVE --format="value(account)")
      echo "Current service account: $CURRENT_SA"
      
      # Generate token with Drive scope
      ACCESS_TOKEN=$(gcloud auth print-access-token --impersonate-service-account=$CURRENT_SA --scopes=https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/drive.readonly)
      
      # Save the token for later steps
      echo "$ACCESS_TOKEN" > /workspace/drive_token.txt
      
      # Create a profiles override with the token
      mkdir -p /workspace/.dbt/
      cat > /workspace/.dbt/profiles.yml <<EOF
      default:
        outputs:
          dev:
            type: bigquery
            method: oauth
            token: "$ACCESS_TOKEN"
            project: $_GOOGLE_CLOUD_PROJECT
            dataset: dbt_dataset
            threads: 4
            timeout_seconds: 300
        target: dev
      EOF
      
      # Verify the token works by testing Drive API access
      curl -s -H "Authorization: Bearer $ACCESS_TOKEN" https://www.googleapis.com/drive/v3/files?pageSize=1 | jq .

  - id: "Check ADC"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
    - "-c"
    - |
      echo "Checking ADC (Application Default Credentials)..."
      gcloud auth application-default print-access-token || echo "No ADC found"
      echo "Active account:"
      gcloud auth list
      
      # Show the token we created with Drive scope
      echo "Our custom token with Drive scope:"
      cat /workspace/drive_token.txt

  - id: "debug workspace"
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - 'ls -R /workspace'

  - id: "DBT Check"
    name: "python:3.11-slim"
    entrypoint: sh
    env:
      - 'DBT_PROFILES_DIR=/workspace/.dbt/'
      - 'GOOGLE_OAUTH_TOKEN=$(cat /workspace/drive_token.txt)'
    args:
      - "-c"
      - |
        . .venv/bin/activate
        apt-get update && apt-get install -y git
        if [ -z "$_GOOGLE_CLOUD_PROJECT" ]; then
          echo "No project id provided. Please set the _GOOGLE_CLOUD_PROJECT substitution variable."
          exit 1
        fi
        export GOOGLE_CLOUD_PROJECT="$_GOOGLE_CLOUD_PROJECT"
        dbt --version
        dbt deps
        dbt compile
        dbt debug
        dbt ls
    volumes:
      - name: virtual_env
        path: /.venv

  - id: "DBT Run Raw"
    name: "python:3.11-slim"
    entrypoint: sh
    env:
      - 'DBT_PROFILES_DIR=/workspace/.dbt/'
      - 'GOOGLE_OAUTH_TOKEN=$(cat /workspace/drive_token.txt)'
    args:
      - "-c"
      - |
        . .venv/bin/activate
        apt-get update && apt-get install -y git
        if [ -z "$_GOOGLE_CLOUD_PROJECT" ]; then
          echo "No project id provided. Please set the _GOOGLE_CLOUD_PROJECT substitution variable."
          exit 1
        fi
        export GOOGLE_CLOUD_PROJECT="$_GOOGLE_CLOUD_PROJECT"
        echo "Would execute here"
        pwd
        dbt deps
        dbt run
    volumes:
      - name: virtual_env
        path: /.venv

options:
  logStreamingOption: STREAM_ON
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _GOOGLE_CLOUD_PROJECT: "earnest-beacon-455013-n6"
#  _DBT_DATASET: "hydrated_us"

