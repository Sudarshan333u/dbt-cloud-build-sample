steps:
  - id: "Install Deps"
    name: "python:3.11-slim"
    entrypoint: sh
    args:
      - "-c"
      - |
        apt-get update -y
        apt-get install -y git
        pip install uv
        uv venv
        uv pip install -r pyproject.toml
    volumes:
      - name: virtual_env
        path: /.venv

  - id: "Generate Service Account Token with Drive Scope"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Generating service account token with Drive scope..."
        apt-get update && apt-get install -y jq curl

        SERVICE_ACCOUNT=$(gcloud auth list --filter=status:ACTIVE --format="value(account)")
        echo "Active service account: $SERVICE_ACCOUNT"

        PROJECT_ID="$_GOOGLE_CLOUD_PROJECT"
        echo "Project ID: $PROJECT_ID"

        echo "Generating token with IAM API..."
        TOKEN=$(curl -s -X POST \
          -H "Authorization: Bearer $(gcloud auth print-access-token)" \
          -H "Content-Type: application/json" \
          -d "{ 
            \"scope\": [
              \"https://www.googleapis.com/auth/bigquery\", 
              \"https://www.googleapis.com/auth/drive.readonly\"
            ]
          }" \
          "https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/$SERVICE_ACCOUNT:generateAccessToken" \
          | jq -r '.accessToken')

        if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
          echo "Failed to generate token with Drive scope."
          exit 1
        fi

        echo "$TOKEN" > /workspace/drive_token.txt
        mkdir -p /workspace/.dbt/
        echo "default:" > /workspace/.dbt/profiles.yml
        echo "  outputs:" >> /workspace/.dbt/profiles.yml
        echo "    dev:" >> /workspace/.dbt/profiles.yml
        echo "      type: bigquery" >> /workspace/.dbt/profiles.yml
        echo "      method: oauth" >> /workspace/.dbt/profiles.yml
        echo "      token: \"\$TOKEN\"" >> /workspace/.dbt/profiles.yml  # <- escaped properly
        echo "      project: $PROJECT_ID" >> /workspace/.dbt/profiles.yml
        echo "      dataset: dbt_dataset" >> /workspace/.dbt/profiles.yml
        echo "      threads: 4" >> /workspace/.dbt/profiles.yml
        echo "      timeout_seconds: 300" >> /workspace/.dbt/profiles.yml
        echo "  target: dev" >> /workspace/.dbt/profiles.yml

  - id: "Check ADC"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Checking ADC..."
        gcloud auth application-default print-access-token || echo "No ADC found"
        echo "Active account:"
        gcloud auth list
        echo "Testing Drive access..."
        TOKEN=$(cat /workspace/drive_token.txt)
        curl -s -H "Authorization: Bearer $TOKEN" "https://www.googleapis.com/drive/v3/files?pageSize=1" | jq .

  - id: "debug workspace"
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - 'ls -R /workspace'

  - id: "DBT Check"
    name: "python:3.11-slim"
    entrypoint: sh
    env:
      - 'DBT_PROFILES_DIR=/workspace/.dbt/'
    args:
      - "-c"
      - |
        . .venv/bin/activate
        apt-get update && apt-get install -y git
        if [ -z "$_GOOGLE_CLOUD_PROJECT" ]; then
          echo "No project id provided. Please set the _GOOGLE_CLOUD_PROJECT substitution variable."
          exit 1
        fi
        dbt --version
        dbt deps
        dbt compile
        dbt debug
        dbt ls
    volumes:
      - name: virtual_env
        path: /.venv

  - id: "DBT Run Raw"
    name: "python:3.11-slim"
    entrypoint: sh
    env:
      - 'DBT_PROFILES_DIR=/workspace/.dbt/'
    args:
      - "-c"
      - |
        . .venv/bin/activate
        apt-get update && apt-get install -y git
        if [ -z "$_GOOGLE_CLOUD_PROJECT" ]; then
          echo "No project id provided. Please set the _GOOGLE_CLOUD_PROJECT substitution variable."
          exit 1
        fi
        echo "Would execute here"
        dbt deps
        dbt run
    volumes:
      - name: virtual_env
        path: /.venv

options:
  logStreamingOption: STREAM_ON
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _GOOGLE_CLOUD_PROJECT: "earnest-beacon-455013-n6"
